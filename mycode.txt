class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int K) {
        vector<vector<int>> result;
        unordered_map<int,vector<int> >m;
        for(auto i=0;i<points.size();i++){
            int j=0;
            vector<int> temp;
            temp[j++]=points[i][0];
            temp[j]=points[i][1];
            m.insert(sqrt(points[i][0]*points[i][0]+points[i][1]*points[i][1]),temp);
        }
        sort(m.begin(),m.end());
        int j=0;
        for(auto it=m.begin();it!=m.end();it++){
            result.push_back(m->first);
            j++;
            if(j==k)
                break;
        }
        return result;
    }
};









class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        vector<vector<int>> result;
        multimap<int,int>m;
        for(int i=0;i<points.size();i++){
            m.insert(points[i][0]*points[i][0]+points[i][1]*points[i][1],i);
        }
        for(auto it=m.begin();it!=m.end();it++){
            k--;
            result.push_back(points[it->second]);
            if(k==0)
                break;
        }
        return result;
    }
};